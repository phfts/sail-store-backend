namespace :user do
  desc "Alterar senha de um usu√°rio"
  task change_password: :environment do
    puts "=== ALTERA√á√ÉO DE SENHA DE USU√ÅRIO ==="
    puts
    
    # Solicitar email do usu√°rio
    print "Digite o email do usu√°rio: "
    email = STDIN.gets.chomp
    
    # Validar se o email n√£o est√° vazio
    if email.blank?
      puts "‚ùå Email n√£o pode estar vazio!"
      exit 1
    end
    
    # Buscar o usu√°rio
    user = User.find_by(email: email)
    
    unless user
      puts "‚ùå Usu√°rio n√£o encontrado com o email: #{email}"
      exit 1
    end
    
    puts "‚úÖ Usu√°rio encontrado: #{user.email} (#{user.admin? ? 'Admin' : 'Usu√°rio normal'})"
    puts
    
    # Solicitar nova senha
    print "Digite a nova senha: "
    new_password = STDIN.gets.chomp
    
    # Validar se a senha n√£o est√° vazia
    if new_password.blank?
      puts "‚ùå Senha n√£o pode estar vazia!"
      exit 1
    end
    
    # Validar tamanho m√≠nimo da senha
    if new_password.length < 6
      puts "‚ùå Senha deve ter pelo menos 6 caracteres!"
      exit 1
    end
    
    # Confirmar a senha
    print "Confirme a nova senha: "
    password_confirmation = STDIN.gets.chomp
    
    unless new_password == password_confirmation
      puts "‚ùå Senhas n√£o coincidem!"
      exit 1
    end
    
    # Atualizar a senha
    begin
      user.update!(password: new_password)
      puts
      puts "‚úÖ Senha alterada com sucesso para o usu√°rio: #{user.email}"
      puts "üîë Nova senha definida!"
    rescue => e
      puts "‚ùå Erro ao alterar senha: #{e.message}"
      exit 1
    end
  end

  desc "Listar todos os usu√°rios"
  task list: :environment do
    puts "=== LISTA DE USU√ÅRIOS ==="
    puts
    
    users = User.all.order(:email)
    
    if users.empty?
      puts "Nenhum usu√°rio encontrado."
      return
    end
    
    puts "ID".ljust(5) + "Email".ljust(30) + "Admin".ljust(8) + "Criado em"
    puts "-" * 65
    
    users.each do |user|
      admin_status = user.admin? ? "Sim" : "N√£o"
      created_at = user.created_at.strftime("%d/%m/%Y %H:%M")
      
      puts "#{user.id.to_s.ljust(5)}#{user.email.ljust(30)}#{admin_status.ljust(8)}#{created_at}"
    end
    
    puts
    puts "Total: #{users.count} usu√°rio(s)"
  end

  desc "Criar novo usu√°rio admin"
  task create_admin: :environment do
    puts "=== CRIAR NOVO USU√ÅRIO ADMIN ==="
    puts
    
    # Solicitar email
    print "Digite o email do novo admin: "
    email = STDIN.gets.chomp
    
    # Validar email
    if email.blank?
      puts "‚ùå Email n√£o pode estar vazio!"
      exit 1
    end
    
    # Verificar se email j√° existe
    if User.exists?(email: email)
      puts "‚ùå J√° existe um usu√°rio com este email!"
      exit 1
    end
    
    # Solicitar senha
    print "Digite a senha: "
    password = STDIN.gets.chomp
    
    # Validar senha
    if password.blank?
      puts "‚ùå Senha n√£o pode estar vazia!"
      exit 1
    end
    
    if password.length < 6
      puts "‚ùå Senha deve ter pelo menos 6 caracteres!"
      exit 1
    end
    
    # Confirmar senha
    print "Confirme a senha: "
    password_confirmation = STDIN.gets.chomp
    
    unless password == password_confirmation
      puts "‚ùå Senhas n√£o coincidem!"
      exit 1
    end
    
    # Criar usu√°rio
    begin
      user = User.create!(
        email: email,
        password: password,
        admin: true
      )
      
      puts
      puts "‚úÖ Usu√°rio admin criado com sucesso!"
      puts "üìß Email: #{user.email}"
      puts "üîë Senha definida!"
      puts "üëë Status: Admin"
    rescue => e
      puts "‚ùå Erro ao criar usu√°rio: #{e.message}"
      exit 1
    end
  end

  desc "Promover usu√°rio para admin"
  task promote_to_admin: :environment do
    puts "=== PROMOVER USU√ÅRIO PARA ADMIN ==="
    puts
    
    # Solicitar email
    print "Digite o email do usu√°rio: "
    email = STDIN.gets.chomp
    
    if email.blank?
      puts "‚ùå Email n√£o pode estar vazio!"
      exit 1
    end
    
    # Buscar usu√°rio
    user = User.find_by(email: email)
    
    unless user
      puts "‚ùå Usu√°rio n√£o encontrado com o email: #{email}"
      exit 1
    end
    
    if user.admin?
      puts "‚ö†Ô∏è Usu√°rio j√° √© admin: #{user.email}"
      return
    end
    
    # Confirmar promo√ß√£o
    print "Confirma a promo√ß√£o de #{user.email} para admin? (s/N): "
    confirmation = STDIN.gets.chomp.downcase
    
    unless ['s', 'sim', 'y', 'yes'].include?(confirmation)
      puts "‚ùå Opera√ß√£o cancelada."
      return
    end
    
    # Promover usu√°rio
    begin
      user.update!(admin: true)
      puts "‚úÖ Usu√°rio promovido para admin: #{user.email}"
    rescue => e
      puts "‚ùå Erro ao promover usu√°rio: #{e.message}"
      exit 1
    end
  end

  desc "Remover privil√©gios de admin"
  task demote_from_admin: :environment do
    puts "=== REMOVER PRIVIL√âGIOS DE ADMIN ==="
    puts
    
    # Solicitar email
    print "Digite o email do admin: "
    email = STDIN.gets.chomp
    
    if email.blank?
      puts "‚ùå Email n√£o pode estar vazio!"
      exit 1
    end
    
    # Buscar usu√°rio
    user = User.find_by(email: email)
    
    unless user
      puts "‚ùå Usu√°rio n√£o encontrado com o email: #{email}"
      exit 1
    end
    
    unless user.admin?
      puts "‚ö†Ô∏è Usu√°rio n√£o √© admin: #{user.email}"
      return
    end
    
    # Verificar se √© o √∫ltimo admin
    admin_count = User.where(admin: true).count
    if admin_count <= 1
      puts "‚ùå N√£o √© poss√≠vel remover o √∫ltimo admin do sistema!"
      exit 1
    end
    
    # Confirmar remo√ß√£o
    print "Confirma a remo√ß√£o dos privil√©gios de admin de #{user.email}? (s/N): "
    confirmation = STDIN.gets.chomp.downcase
    
    unless ['s', 'sim', 'y', 'yes'].include?(confirmation)
      puts "‚ùå Opera√ß√£o cancelada."
      return
    end
    
    # Remover privil√©gios
    begin
      user.update!(admin: false)
      puts "‚úÖ Privil√©gios de admin removidos: #{user.email}"
    rescue => e
      puts "‚ùå Erro ao remover privil√©gios: #{e.message}"
      exit 1
    end
  end
end
